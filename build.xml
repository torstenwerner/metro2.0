<?xml version="1.0" encoding="UTF-8"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2009 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="WSIT" default="main" basedir=".">
    <description>Builds, tests, and runs the project WSIT.</description>
    <import file="nbproject/build-impl.xml"/>
    <import file="properties.xml"/>
    <import file="build-shared.xml"/>

    <target name="-do-jar-without-manifest" depends="image, bundle, create-pom-files">
        <mkdir dir="${dist.dir}"/>
        <zip basedir="${dist.image.dir}" destfile="${dist.dir}/${install.name}.zip"/>
    </target>
    
    <target name="dist" depends="jar"/>

    <target name="main" depends="dist"
        description="Create the wsit tool and runtime jars and installers."/>
    
    <target name="bundle" depends="init, compile"
            description="Create the Metro OSGi bundle for GlassFish V3.">
        <taskdef resource="aQute/bnd/ant/taskdef.properties"
                 classpath="${bnd.jar}"/>

        <mkdir dir="${build.dir}/bnd"/>
        <copy file="${basedir}/etc/bnd/webservices.bnd" todir="${build.dir}/bnd">
            <filterset>
                <filter token="RELEASE_VERSION" value="${release.impl.version}"/>
            </filterset>
        </copy>

        <copy file="${basedir}/etc/bnd/webservices-api.bnd" todir="${build.dir}/bnd">
            <filterset>
                <filter token="RELEASE_VERSION" value="${release.impl.version}"/>
            </filterset>
        </copy>
        
        <mkdir dir="${v3.build.dir}"/>
        <bnd classpath="rt/${osgi.build.dir}/webservices-rt.jar, tools/${osgi.build.dir}/webservices-tools.jar"
             failok="false"
             output="${v3.build.dir}/webservices-osgi.jar"
             files="${build.dir}/bnd/webservices.bnd"/>
        <bnd classpath="rt/${osgi.build.dir}/webservices-api.jar"
             failok="false"
             output="${v3.build.dir}/webservices-api-osgi.jar"
             files="${build.dir}/bnd/webservices-api.bnd"/>
        <bnd classpath="lib/runtime/woodstox.jar, lib/runtime/jsr173_api.jar"
             failok="false"
             output="${v3.build.dir}/woodstox-osgi.jar"
             files="etc/bnd/woodstox.bnd"/>

        <copy todir="${dist.image.wsit.dir}/osgi" filtering="false">
            <fileset dir="${v3.build.dir}">
                <include name="webservices*osgi.jar"/>
                <include name="woodstox-osgi.jar"/>
            </fileset>
            <fileset dir="${lib.osgi.dir}">
                <include name="jaxb*osgi.jar"/>
            </fileset>
        </copy>             
    </target>

    <target name="create-pom-files" depends="init" description="Copies the maven POM files into dist and replaces all placeholders">
        <delete dir="${dist.dir}/maven"/>
        
        <filter token="metro.version" value="${release.impl.version}-${release.impl.version.suffix}"/>
        <filter token="jaxb.version" value="${jaxb.osgi.dependency.version}"/>
        <copy todir="${dist.dir}/maven" filtering="true">
            <fileset dir="${etc.dir}/maven" includes="**/pom*.xml" />
        </copy>
    </target>

    <target name="image" description="Create the Metro tool and runtime jars.">
        <filter token="release.impl.version" value="${release.impl.version}"/>
        <filter token="release.impl.version.suffix" value="${release.impl.version.suffix}"/>
        <filter token="release.underscore.version" value="${release.underscore.version}" />
        <filter token="release.dash.version" value="${release.dash.version}" />
        <filter token="release.date" value="${release.build.date}"/>

        <filter token="release.context.url" value="${release.context.url}"/>
        
        <filter token="wsit.release.version" value="${release.impl.version}"/>
        
        <filter token="jaxws.release.version" value="${jaxws.release.version}"/>
        <filter token="jaxws.release.context.url" value="${jaxws.release.context.url}"/>

        <filter token="jaxb.release.version" value="${jaxb.release.version}"/>
        <filter token="jaxb.release.context.url" value="${jaxb.release.context.url}"/>

        <filter token="product.name" value="${product.name}"/>
        <filter token="product.shortname" value="Metro"/>

        <copy todir="${dist.image.wsit.dir}" filtering="true">
            <fileset dir="${basedir}" includes="CDDL*.*"/>
            <fileset dir="${basedir}" includes="LICENSE.txt"/>
            <fileset dir="${etc.dir}" includes="readme.html"/>
            <fileset dir="${etc.dir}" includes="metro-on-*.*"/>
        </copy>
        <!-- generate samples -->
        <unzip src="lib/jaxws-samples.zip" dest="${dist.image.wsit.dir}/samples" />
        <copy todir="${dist.image.wsit.dir}/samples">
            <fileset dir="${basedir}/samples"/>
        </copy>
        <replace dir="${dist.image.wsit.dir}/samples">
            <replacefilter token="JAXWS_HOME" value="METRO_HOME" />
            <replacefilter token="JAX-WS installation directory" value="Metro installation directory" />
        </replace>

        <!-- copy over shell scripts -->
        <unzip src="lib/jaxws-bin.zip" dest="${dist.image.wsit.dir}/bin" />
        <replace dir="${dist.image.wsit.dir}/bin">
            <replacefilter token="JAXWS_HOME" value="METRO_HOME" />
            <replacefilter token="jaxws-tools.jar" value="webservices-tools.jar" />
        </replace>
    </target>
    
    <target name="-javadoc-build" depends="init"/>
    
    <target name="src-zip">
        <ant dir="${rt.dir}" target="src-zip"/>
        <ant dir="${tools.dir}" target="src-zip"/>
    </target>

    <target name="zip-api-src" depends="init"
            description="Create a source zip archive of public APIs for Java EE Javadoc generation">
        <delete dir="${build.dir}/api-src" quiet="true"/>
        <delete file="${build.dir}/webservices-api-src.zip" quiet="true"/>
        <mkdir dir="${build.dir}/api-src"/>

        <!-- The zip/unzip tasks don't allow to manipulate the paths of the files -->
        <!-- so we need to create proper paths by explicitly moving files around. -->

        <!-- jsr173_1.0_src.zip -->
        <unzip src="lib/runtime/jsr173_1.0_src.zip" dest="${build.dir}/api-src">
            <patternset includes="src/**"/>
        </unzip>
        <move todir="${build.dir}/api-src">
            <fileset dir="${build.dir}/api-src/src"/>
        </move>
        <delete dir="${build.dir}/api-src/src"/>
        
        <zip destfile="${build.dir}/webservices-api-src.zip" update="false" duplicate="fail">
            <fileset dir="${build.dir}/api-src"/>
            <zipfileset src="lib/runtime/jaxr-api-src.zip"/>
            <zipfileset src="lib/runtime/jaxws-api-src.zip"/>
            <zipfileset src="lib/runtime/jsr181-api.src.zip"/>
            <zipfileset src="lib/runtime/saaj-api-src.zip"/>
        </zip>
    </target>
    
    <macrodef name="integrate-jaxws">
        
        <attribute name="jaxws.base.url"/>
        
        <sequential>
            
            <!-- JAX-WS 2.1 JARs -->

            <!-- Unzip the JARs -->
            <delete dir="${tmpdir}"/>
            <mkdir dir="${tmpdir}"/>
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/build/jaxws-ri.zip"
                    dest="${tmpdir}/jaxws-ri.zip"/>
            <unzip src="${tmpdir}/jaxws-ri.zip" dest="${tmpdir}"/>

            <!-- unzip the JAR source zips -->
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/dist/jaxws-ri/lib/jaxws-libs.src.zip"
                    dest="${tmpdir}/jaxws-libs.src.zip"/>
            <unzip src="${tmpdir}/jaxws-libs.src.zip" dest="${tmpdir}"/>

            <!-- copy to relevant directories -->
            <copy todir="${lib.runtime.dir}" overwrite="true" verbose="${verbose}">
                <fileset dir="${tmpdir}/jaxws-ri/lib" includes="*.jar" excludes="jaxb-xjc.*, *-tools.*"/>
                <fileset dir="${tmpdir}" includes="*.zip" excludes="jaxb-xjc.*, *-tools.*, jaxws-ri.zip, jaxws-lib.src.zip"/>
            </copy>
            <copy todir="${lib.tooltime.dir}" overwrite="true" verbose="${verbose}">
                <fileset dir="${tmpdir}/jaxws-ri/lib" includes="jaxb-xjc.*, *-tools.*"/>
                <fileset dir="${tmpdir}" includes="jaxb-xjc.*, *-tools.*"/>
            </copy>
            <zip file="lib/jaxws-samples.zip">
                <fileset dir="${tmpdir}/jaxws-ri/samples" />
            </zip>
            <zip file="lib/jaxws-bin.zip">
                <fileset dir="${tmpdir}/jaxws-ri/bin" />
            </zip>

            <!-- retrieve the JAXB OSGi bundles -->
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/v3-osgi/jaxb-api-osgi.jar"
                 dest="${lib.osgi.dir}/jaxb-api-osgi.jar"/>
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/v3-osgi/jaxb-osgi.jar"
                 dest="${lib.osgi.dir}/jaxb-osgi.jar"/>

            <!-- retrieve the JAX-WS source zips -->
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/dist/jaxws-ri/lib/jaxws-rt.src.zip"
                    dest="${lib.runtime.dir}/jaxws-rt.src.zip"/>
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/dist/jaxws-ri/lib/jaxws-tools.src.zip"
                    dest="${lib.tooltime.dir}/jaxws-tools.src.zip"/>

            <!-- Local transport JAR and Source -->
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/transports/local/build/jaxws-local-transport.jar"
                    dest="${lib.runtime.dir}/jaxws-local-transport.jar"/>
            <get src="@{jaxws.base.url}/artifact/jax-ws-sources/jaxws-ri/transports/local/build/jaxws-local-transport-src.zip"
                    dest="${lib.runtime.dir}/jaxws-local-transport-src.zip"/>            
        </sequential>
        
    </macrodef>

    <target name="integrate-jaxws-hudson"
            description="integrates latest JAX-WS 2.2 bits in WSIT, meant for internal consumption only">

        <integrate-jaxws jaxws.base.url="http://hudson.sfbay/job/jaxws-ri-2.2/lastSuccessfulBuild"/>
        
    </target>

    <target name="integrate-jaxws-bleedingedge-hudson"
            description="integrates latest JAX-WS 2.2 bleedingedge bits in WSIT, meant for internal consumption only">
                
        <integrate-jaxws jaxws.base.url="http://hudson.sfbay/job/jaxws-ri-2.2/lastSuccessfulBuild"/>
        
    </target>
    
    <target name="integrate-xwss30-hudson"
            description="integrate the last successful XWSS 3.0 Hudson build">
        <!-- get src="http://kohsuke.sfbay/hudson/job/xwss3.0/lastSuccessfulBuild/artifact/xwss/xwss-ri/dist/wsit/lib/xws-security.src.zip"
         dest="lib/xws-security.src.zip" / -->
        <get src="http://hudson.sfbay.sun.com/job/xwss3.0/lastSuccessfulBuild/artifact/xwss/xwss-ri/dist/wsit/lib/xws-security.jar"
             dest="lib/runtime/xws-security.jar" />
        <get src="http://hudson.sfbay.sun.com/job/xwss3.0/lastSuccessfulBuild/artifact/xwss/xwss-ri/dist/wsit/xws-security.src.zip"
             dest="lib/runtime/xws-security.src.zip" />
    </target>

    <target name="integrate-jaxrpc"
            description="integrate the last successful jaxrpc with jcaps fixes build">
        <get src="http://kohsuke.sfbay/hudson/job/jaxrpc-caps6-branch/lastSuccessfulBuild/artifact/build/lib/jaxrpc-impl.jar"
             dest="lib/runtime/jaxrpc-impl.jar" />
        <get src="http://kohsuke.sfbay/hudson/job/jaxrpc-caps6-branch/lastSuccessfulBuild/artifact/build/lib/jaxrpc-spi.jar"
             dest="lib/runtime/jaxrpc-spi.jar" />
    </target>
    
    <target name="integrate-policy-hudson"
            depends="integrate-jaxws-hudson"
            description="integrates the last successful policy Hudson build"/>

    <target name="integrate-jaxr" depends="init, maven-tasks"
            description="Integrate the latest JAXR Maven artifacts.">
        <echo message="Remember to update the JAXR version settings before running this target."/>
        <dependencies filesetId="jaxr.dependencies">
            <dependency groupId="javax.xml" artifactId="jaxr-api" version="1.0_03"/>
            <dependency groupId="com.sun.xml.registry" artifactId="jaxr-impl" version="1.0.7"/>
            <remoteRepository id="glassfish.java.net" url="http://download.java.net/maven/glassfish/"/>
        </dependencies>
        <copy todir="lib/runtime">
            <fileset refid="jaxr.dependencies"/>
            <chainedmapper>
                <flattenmapper/>
                <regexpmapper from="jaxr-(api|impl)(-.*).jar" to="jaxr-\1.jar"/>
            </chainedmapper>
        </copy>
        <dependencies filesetId="jaxr.sources.dependencies">
            <dependency groupId="javax.xml" artifactId="jaxr-api" classifier="sources" version="1.0_03"/>
            <dependency groupId="com.sun.xml.registry" artifactId="jaxr-impl" classifier="sources" version="1.0.7"/>
            <remoteRepository id="glassfish.java.net" url="http://download.java.net/maven/glassfish/"/>
        </dependencies>
        <copy todir="lib/runtime">
            <fileset refid="jaxr.sources.dependencies"/>
            <chainedmapper>
                <flattenmapper/>
                <regexpmapper from="jaxr-(api|impl)(-.*)-sources.jar" to="jaxr-\1-sources.jar"/>
            </chainedmapper>
        </copy>
    </target>

    <target name="runtests">
        <ant antfile="run-ql-tests.xml"/>
    </target>

    <target name="create-wsit-integration-zip" depends="dist, src-zip"
            description="Create an archive dist/metro-integration/metro-integration.zip
                that contains all libraries and their source code that go into the Metro
                stack. Right now this target is not entirely accomplishing this task
                and only bundles the combined webservices-*.jar instead of the individual
                libraries that went into these jars.">
        <property name="metro.integration.dir" value="${dist.dir}/metro-integration"/>
        <delete dir="${dist.dir}/metro-integration" quiet="true"/>
        <mkdir dir="${dist.dir}/metro-integration"/>

        <copy todir="${metro.integration.dir}" >
            <fileset dir="${dist.image.wsit.lib.dir}"/>
        </copy>
        <copy todir="${metro.integration.dir}" >
            <fileset dir="${rt.dir}/build">
                <include name="*src.zip"/>
            </fileset>
        </copy>
        <copy todir="${metro.integration.dir}" >
            <fileset dir="${tools.dir}/build/">
                <include name="*src.zip"/>
            </fileset>
        </copy>
        <copy todir="${metro.integration.dir}">
            <fileset dir="${lib.runtime.dir}">
                <include name="xws-security.jar"/>
                <include name="trust-jaxbbindings.jar"/>
                <include name="secconv-jaxbbindings.jar"/>
            </fileset>
        </copy>
        <zip destfile="${metro.integration.dir}/metro-integration.zip">
            <fileset dir="${metro.integration.dir}"/>
        </zip>
    </target>
    
    <target name="-post-compile-test"
            description="Run unit tests of dependent projects">
        <ant dir="${rt.dir}"
             target="test"
             inheritAll="false"/>
    </target>

    <target name="generate-bundle-for-licensee" depends="init">
        <property name="wsit.ws.dir" value="${basedir}"/>
        <property name="source.drop.dir" value="build/source-bundle"/>
        <property name="source.dist.dir.name" value="wsit-sourcebundle-${BUILD_TAG}"/>


        <property name="ws.source.dir" value="${source.drop.dir}"/>
        <echo message="wsit.ws.dir => ${wsit.ws.dir}" />
        <echo message="ws.source.dir => ${ws.source.dir}" />
        <mkdir dir="${ws.source.dir}" />
        <delete dir="${ws.source.dir}" />

        <echo message="Copying wsit sources"/>
        <mkdir dir="${ws.source.dir}/wsit/rt" />

        <copy todir="${ws.source.dir}/wsit" file ="${wsit.ws.dir}/build.xml"/>
        <copy todir="${ws.source.dir}/wsit" file ="${wsit.ws.dir}/properties.xml"/>
        <copy todir="${ws.source.dir}/wsit/rt">
            <fileset dir="${wsit.ws.dir}/rt"/>
        </copy>

        <copy todir="${ws.source.dir}/wsit/tools">
            <fileset dir="${wsit.ws.dir}/tools"/>
        </copy>

        <copy todir="${ws.source.dir}/wsit/lib/">
            <fileset dir="${wsit.ws.dir}/lib"/>
        </copy>

        <copy todir="${ws.source.dir}/wsit">
            <fileset dir="${wsit.ws.dir}">
                <include name="*.html"/>
                <include name="*.txt"/>
            </fileset>
        </copy>

        <copy todir="${ws.source.dir}/wsit/nbproject">
            <fileset dir="${wsit.ws.dir}/nbproject"/>
        </copy>
        <copy todir="${ws.source.dir}/wsit/etc">
            <fileset dir="${wsit.ws.dir}/etc"/>
        </copy>
        <delete>
            <fileset dir="${wsit.ws.dir}" includes="**/CVS" />
        </delete>

        <zip destfile="${source.drop.dir}/wsit-licensee-bundle.zip" basedir="${ws.source.dir}"/>
    </target>

    <!-- 

    GLASSFISH UPDATE CENTER SCRIPTS
    
    Prerequisities:
    1. install Update Center v2.0 Toolkit
    2. Setup the Pyhton environment 
    3. Setup the UC2_DIST path to point to the UC2 toolkit directory
    3. cd to Metro code base directory
    4. run the uc2 ant target
    ===============    

    cdmetro
    export UC2_DIST=$HOME/sandbox/java.net/uc2/project/build/dist/darwin-universal
    export LD_LIBRARY_PATH=$UC2_DIST/pkg/python2.4-minimal/lib
    export PYTHONPATH=$UC2_DIST/pkg/vendor-packages:`pwd`

    -->

    <target name="-set-uc2-properties" description="Sets properties needed for UC2 push">
        <property name="gfv3.module.dir" value="${basedir}/ucmodule/glassfish/modules"/>
        <property name="gfv3.bin.dir" value="${basedir}/ucmodule/glassfish/bin"/>

        <property name="module.version" value="1.4" />
        <property name="module.revision" value="5007" />
        <!--property name="metro.hudson.job.name" value="wsit-javanet" />
        <loadresource property="metro.hudson.pushed.build.number">
            <url url="http://hudson.sfbay.sun.com/job/${metro.hudson.job.name}/lastSuccessfulBuild/buildNumber" />
        </loadresource>
        <property name="module.revision" value="${metro.hudson.pushed.build.number}" /-->

        <property name="webservices.jar.source.url" value="http://download.java.net/maven/2/com/sun/xml/ws/webservices/1.4-RC1/webservices-1.4-RC1-osgi.jar" />
        <!--property name="webservices.jar.source.url" value="http://hudson.sfbay.sun.com/job/${metro.hudson.job.name}/${metro.hudson.pushed.build.number}/artifact/dist/image/metro/for_v3/webservices-osgi.jar" /-->
        <!--property name="webservices.jar.source.url" value="/net/koori.sfbay/onestop/wsit/1.4/promoted/fcs/b01/binaries/metro/for_v3/webservices-osgi.jar" /-->

        <property name="jaxb.jar.source.url" value="http://download.java.net/maven/2/com/sun/xml/bind/jaxb/2.1.9-RC1/jaxb-2.1.9-RC1-osgi.jar" />
        <!--property name="jaxb.jar.source.url" value="http://hudson.sfbay.sun.com/job/${metro.hudson.job.name}/${metro.hudson.pushed.build.number}/artifact/dist/image/metro/for_v3/jaxb-osgi.jar" /-->
        <!--property name="jaxb.jar.source.url" value="/net/koori.sfbay/onestop/wsit/1.4/promoted/fcs/b01/binaries/metro/for_v3/jaxb-osgi.jar" /-->

        <property name="jsr109.jar.source.url" value="http://javaweb.sfbay/~bhakti/109oct20/jsr109-impl.jar" />
        <!--property name="jsr109.jar.source.url" value="http://hudson.sfbay/job/jsr109-impl/org.glassfish.webservices$jsr109-impl/lastSuccessfulBuild/artifact/org.glassfish.webservices/jsr109-impl/10.0-SNAPSHOT/jsr109-impl-10.0-SNAPSHOT.jar" /-->

        <property name="shell.scripts.source.url.base" value="http://hudson.sfbay/job/jsr109-impl/ws/webservices/jsr109-impl/target/classes" />


        <property environment="env" />
        <property name="makepkgs.path" value="${env.UC2_DIST}/../../../tools"/>
        <property name="uc2.repo" value="http://eflat.sfbay.sun.com:40000"/>
        <!--property name="uc2.repo" value="http://repine.sfbay.sun.com:40000"/-->
    </target>

    <target name="-clean-uc2" description="Clean UC related things">
        <delete dir="${basedir}/ucmodule"/>
    </target>
    
    <target name="prepare-uc2" depends="-clean-uc2, -set-uc2-properties" description="Prepare GlassFish Update Center Module">

        <mkdir dir="${gfv3.module.dir}"/>
        <mkdir dir="${gfv3.bin.dir}"/>

        <echo message="Retrieving webservices.jar from '${webservices.jar.source.url}'" />
        <get src="${webservices.jar.source.url}" dest="${gfv3.module.dir}/webservices.jar" verbose="false" />

        <echo message="Retrieving jaxb.jar from '${jaxb.jar.source.url}'" />
        <get src="${jaxb.jar.source.url}" dest="${gfv3.module.dir}/jaxb.jar" verbose="false" />
            
        <echo message="Retrieving jsr109-impl.jar from '${jsr109.jar.source.url}'" />
        <get src="${jsr109.jar.source.url}" dest="${gfv3.module.dir}/jsr109-impl.jar" verbose="false" />
        
        <echo message="Retrieving shell scripts from '${shell.scripts.source.url.base}/'" />
        <copy todir="${gfv3.bin.dir}" flatten="true" verbose="true" >
            <resources>
                <url url="${shell.scripts.source.url.base}/schemagen"/>
                <url url="${shell.scripts.source.url.base}/schemagen.bat"/>

                <url url="${shell.scripts.source.url.base}/wscompile"/>
                <url url="${shell.scripts.source.url.base}/wscompile.bat"/>

                <url url="${shell.scripts.source.url.base}/wsdeploy"/>
                <url url="${shell.scripts.source.url.base}/wsdeploy.bat"/>

                <url url="${shell.scripts.source.url.base}/wsgen"/>
                <url url="${shell.scripts.source.url.base}/wsgen.bat"/>

                <url url="${shell.scripts.source.url.base}/wsimport"/>
                <url url="${shell.scripts.source.url.base}/wsimport.bat"/>

                <url url="${shell.scripts.source.url.base}/xjc"/>
                <url url="${shell.scripts.source.url.base}/xjc.bat"/>
            </resources>
        </copy>
              
        <echo message="Adding Metro license" />
        <copy file="${basedir}/LICENSE.txt" toFile="${gfv3.module.dir}/Metro-LICENSE.txt" />
        
    </target>
    
    <target name="publish-uc2" depends="-set-uc2-properties">
        <property name="full.module.version" value="${module.version},0-${module.revision}" />

        <echo message="Push Metro module v${full.module.version} to ${uc2.repo}" />
        <exec executable="python">
            <arg line="${makepkgs.path}/makepkgs.py -s ${uc2.repo} -v ${full.module.version} -b ${basedir}/ucmodule uc2"/>
        </exec>
        <echo message="Push finished" />
    </target>
    
    <target name="uc2" depends="prepare-uc2,publish-uc2" />
</project>
