/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 1997-2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License. You can obtain
 * a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 * or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.  If applicable, add the following below the License
 * Header, with the fields enclosed by brackets [] replaced by your own
 * identifying information: "Portions Copyrighted [year]
 * [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

package com.sun.xml.ws.tx.common;

import javax.resource.spi.XATerminator;
import javax.transaction.HeuristicMixedException;
import javax.transaction.HeuristicRollbackException;
import javax.transaction.InvalidTransactionException;
import javax.transaction.NotSupportedException;
import javax.transaction.RollbackException;
import javax.transaction.SystemException;
import javax.transaction.Transaction;
import javax.transaction.TransactionManager;
import javax.transaction.xa.XAException;
import javax.transaction.xa.Xid;
import junit.framework.TestCase;

/**
 *
 * @author Marek Potociar <marek.potociar at sun.com>
 */
public class TransactionImportManagerTest extends TestCase {
    private static final class DummyTm implements TransactionManager, TransactionImportWrapper {

        public void begin() throws NotSupportedException, SystemException {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public void commit() throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, IllegalStateException, SystemException {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public int getStatus() throws SystemException {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public Transaction getTransaction() throws SystemException {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public void resume(Transaction arg0) throws InvalidTransactionException, IllegalStateException, SystemException {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public void rollback() throws IllegalStateException, SecurityException, SystemException {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public void setRollbackOnly() throws IllegalStateException, SystemException {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public void setTransactionTimeout(int arg0) throws SystemException {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public Transaction suspend() throws SystemException {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public void recreate(Xid xid, long timeout) {
            // noop
        }

        public void release(Xid xid) {
            // noop
        }

        public XATerminator getXATerminator() {
            return new XATerminator() {

                public void commit(Xid arg0, boolean arg1) throws XAException {
                    throw new UnsupportedOperationException("Not supported yet.");
                }

                public void forget(Xid arg0) throws XAException {
                    throw new UnsupportedOperationException("Not supported yet.");
                }

                public int prepare(Xid arg0) throws XAException {
                    throw new UnsupportedOperationException("Not supported yet.");
                }

                public Xid[] recover(int arg0) throws XAException {
                    throw new UnsupportedOperationException("Not supported yet.");
                }

                public void rollback(Xid arg0) throws XAException {
                    throw new UnsupportedOperationException("Not supported yet.");
                }
            };
        }

        public int getTransactionRemainingTimeout() throws SystemException {
            return 0;
        }

    }

    
    public TransactionImportManagerTest(String testName) {
        super(testName);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
    }

    /**
     * Test of getInstance method, of class TransactionImportManager.
     */
    public void testReflection() throws SystemException {
        TransactionImportManager tim = new TransactionImportManager(new DummyTm());

        tim.recreate(null, 0); // make sure the call does not cause an exception
        tim.release(null); // make sure the call does not cause an exception
        assertNotNull(tim.getXATerminator());
        assertEquals(0, tim.getTransactionRemainingTimeout());
    }
}
