<?xml version="1.0" encoding="UTF-8"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2008 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->


<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="WSIT-Runtime" default="default" basedir=".">
    <description>Builds, tests, and runs the project WSIT-Runtime.</description>
    <import file="nbproject/build-impl.xml"/>
    <import file="../build-shared.xml"/>

    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.gen-src.dir" value="${build.dir}/gen-src"/>

    <taskdef name="concatmanifest" classname="taskdefs.ConcatManifest">
        <classpath>
            <fileset dir="../${etc.lib.dir}" includes="wsit-taskdefs.jar"/>
        </classpath>
    </taskdef>

    <macrodef name="expand-jars-macro">
        <attribute name="libdir"/>
        <attribute name="tmpdirtowork"/>
        <element name="expandfiles" optional="true"/>
        <element name="metainf" optional="true"/>
        <sequential>
            <delete dir="@{tmpdirtowork}" quiet="true"/>
            <mkdir dir="@{tmpdirtowork}"/>
            <copy file="${basedir}/${etc.metainf.dir}/MANIFEST.MF" todir="@{tmpdirtowork}"/>
            <updateManifestWithVersion file="@{tmpdirtowork}/MANIFEST.MF"
            class-path="webservices-api.jar webservices-extra.jar webservices-rt_l10n.jar webservices-rt_ja.jar webservices-rt_zh.jar webservices-rt_fr.jar webservices-rt_de.jar webservices-rt_es.jar webservices-rt_it.jar webservices-rt_sw.jar webservices-rt_ko.jar webservices-rt_zh_TW.jar"/>
            <concatmanifest tempdir="@{tmpdirtowork}" manifest="@{tmpdirtowork}/MANIFEST.MF">
                <fileset dir="@{libdir}">
                    <include name="*.jar"/>
                    <include name="jaxrpc-api.jar"/>
                    <exclude name="*-sources.jar"/>
                    <exclude name="*javadocs*.jar"/>
                    <exclude name="jaxb-api.jar"/>
                    <exclude name="jaxws-api.jar"/>
                    <exclude name="jmac-api.jar"/>
                    <exclude name="jsr*-api.jar"/>
                    <exclude name="jaxws-local-transport.jar"/>
                    <exclude name="activation.jar"/>
                    <exclude name="http.jar"/>
                    <exclude name="mail-1.4.jar"/>
                    <exclude name="grizzly.jar"/>
                    <expandfiles/>
                </fileset>
                <patternset>
                    <!-- The webservices-osgi.jar should not contain these files
                         and the webservices-rt.jar installs its own files.      -->
                    <exclude name="META-INF/services/javax.xml.stream.XML*Factory"/>
                </patternset>
            </concatmanifest>
            <delete dir="@{tmpdirtowork}/META-INF" includeemptydirs="true" excludes="services/**"/>
            <metainf/>
        </sequential>
    </macrodef>


    <macrodef name="expand-api-jars-macro">
        <attribute name="libdir"/>
        <attribute name="tmpdirtowork" default="${apijar-tmpdir}"/>
        <element name="expandfiles" optional="true"/>
        <element name="metainf" optional="true"/>
        <sequential>
            <delete dir="@{tmpdirtowork}" quiet="true"/>
            <mkdir dir="@{tmpdirtowork}"/>
            <copy file="../${etc.metainf.dir}/MANIFEST.MF" todir="@{tmpdirtowork}"/>
            <updateManifestWithVersion file="@{tmpdirtowork}/MANIFEST.MF" class-path="webservices-extra-api.jar"/>
            <concatmanifest tempdir="@{tmpdirtowork}" manifest="@{tmpdirtowork}/MANIFEST.MF">
                <fileset dir="@{libdir}" >
                    <include name="jaxb-api.jar"/>
                    <include name="saaj-api.jar"/>
                    <include name="jaxws-api.jar"/>
                    <include name="jsr181-api.jar"/>
                    <exclude name="*javadocs*.jar"/>
                    <expandfiles/>
                </fileset>
            </concatmanifest>
            <delete dir="@{tmpdirtowork}/META-INF" includeemptydirs="true" excludes="services/**"/>
            <metainf/>
        </sequential>
    </macrodef>

    <macrodef name="expand-extra-jars-macro">
        <attribute name="libdir"/>
        <element name="metainf" optional="true"/>
        <sequential>
            <delete dir="${extrajar-tmpdir}"/>
            <mkdir dir="${extrajar-tmpdir}"/>
            <copy file="../${etc.metainf.dir}/MANIFEST.MF" todir="${extrajar-tmpdir}"/>
            <updateManifestWithVersion file="${extrajar-tmpdir}/MANIFEST.MF" class-path="webservices-extra-api.jar"/>
            <concatmanifest tempdir="${extrajar-tmpdir}" manifest="${extrajar-tmpdir}/MANIFEST.MF">
                <fileset dir="@{libdir}" includes="jmac-api.jar,http.jar,jsr250-api.jar,mail-1.4.jar,grizzly.jar">
                    <exclude name="*javadocs*.jar"/>
                </fileset>
            </concatmanifest>
          
            <metainf/>
        </sequential>
    </macrodef>

    <macrodef name="expand-extra-api-jars-macro">
        <attribute name="libdir"/>
        <element name="metainf" optional="true"/>
        <sequential>
            <delete dir="${extraapijar-tmpdir}"/>
            <mkdir dir="${extraapijar-tmpdir}"/>
            <copy file="../${etc.metainf.dir}/MANIFEST.MF" todir="${extraapijar-tmpdir}"/>
            <updateManifestWithVersion file="${extraapijar-tmpdir}/MANIFEST.MF"/>
            <concatmanifest tempdir="${extraapijar-tmpdir}" manifest="${extraapijar-tmpdir}/MANIFEST.MF">
                <fileset dir="@{libdir}" includes="jaxr-api.jar,jaxrpc-api.jar">
                    <exclude name="*javadocs*.jar"/>
                </fileset>
            </concatmanifest>
            <delete dir="${extraapijar-tmpdir}/META-INF" includeemptydirs="true" excludes="services/**"/>
            <metainf/>
        </sequential>
    </macrodef>
    
    <macrodef name="combine-jars-macro">
        <attribute name="classesdir"/>
        <attribute name="jarname"/>
        <attribute name="jar-tmpdir"/>
        <attribute name="dist-image-dir" default="../${dist.image.wsit.lib.dir}"/>
        <element name="services" optional="true"/>
        <sequential>
            <mkdir dir="@{dist-image-dir}"/>
            <jar destfile="@{dist-image-dir}/@{jarname}.jar" manifest="@{jar-tmpdir}/MANIFEST.MF">
                <services/>
                <fileset dir="@{classesdir}"/>
            </jar>
        </sequential>
    </macrodef>

    <target name="resgen" depends="init"
            description="Generate class wrappers for all property files that contain localizable messages">

        <taskdef name="resgen" classname="com.sun.tools.resourcegen.ResourceGenTask">
            <classpath>
                <path path="${javac.classpath}"/>
                <pathelement path="${basedir}/../${lib.tooltime.dir}/jaxws-tools.jar"/>
            </classpath>
        </taskdef>

        <mkdir dir="${build.gen-src.dir}"/>

        <resgen destdir="${build.gen-src.dir}">
            <resource dir="${src.dir}" includes="com/sun/xml/ws/**/*.properties, com/sun/xml/wss/**/*.properties"/>
        </resgen>
    </target>

    <target name="-pre-compile" depends="resgen"
            description="Hook resgen target into compilation process"/>

    <target name="-pre-compile-single" depends="resgen"
            description="Hook resgen target into single file compilation process"/>

    <target name="-do-jar-without-manifest">
        <available file="${rtjar-tmpdir}" type="dir" property="runtime.jars.expanded"/>
        <antcall target="expand-jars-runtime"/>
        <antcall target="expand-jars-v3-runtime"/>
        <antcall target="combine-jars-runtime"/>
        <antcall target="combine-jars-v3-runtime"/>
        <antcall target="expand-jars-api"/>
        <antcall target="expand-jars-v3-api"/>
        <antcall target="combine-jars-api"/>
        <antcall target="combine-jars-v3-api"/>
        <antcall target="expand-jars-extra"/>
        <antcall target="combine-jars-extra"/>
        <antcall target="expand-jars-extra-api"/>
        <antcall target="combine-jars-extra-api"/>
    </target>

    <target name="-pre-jar">
        <mkdir dir="../${dist.image.wsit.lib.dir}" />
    </target>

    <target name="-post-jar" depends="create-wstx-war">
        <!-- We need to include the StAX API separately in the distribution -->
        <copy todir="../${dist.image.wsit.lib.dir}">
            <fileset dir="../${lib.runtime.dir}">
                <include name="jsr173_api.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- include wsdl files for wstx resource lookups -->
    <property name="tx.tmp" value="${tmpdir}/tx"/>
    <property name="tx.tmp.webinf" value="${tx.tmp}/WEB-INF"/>
    <macrodef name="include-wstx-resources">
        <sequential>
            <delete dir="${tx.tmp}"/>
            <mkdir dir="${tx.tmp.webinf}"/>
            <copy todir="${tx.tmp.webinf}" overwrite="true">
                <fileset dir="etc/tx/WEB-INF">
                    <!-- we only want the wsdl & xsd files -->
                    <exclude name="**/web.xml"/>
                    <exclude name="**/webservices.xml"/>
                    <exclude name="**/sun-web.xml"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <target name="expand-jars-runtime" unless="runtime.jars.expanded">
        <expand-jars-macro libdir="../${lib.runtime.dir}" tmpdirtowork="${rtjar-tmpdir}" >
            <metainf>
                <!-- Replace JAX-WS services files with ours -->
                <copy todir="${rtjar-tmpdir}/META-INF/services" overwrite="true">
                    <fileset dir="../etc/META-INF/services"/>
                </copy>
                <!-- Copying the default Metro configuration file into META-INF folder -->
                <copy todir="${rtjar-tmpdir}/META-INF" overwrite="true">
                    <fileset dir="../etc/META-INF">
                        <include name="metro-default.xml"/>
                    </fileset>
                </copy>
                <!--This step is required so that jaxrpc and xwss can run at the
                    same time. When jars are getting merged in webservices-rt.jar
                    the toolPlugin of one overwrites the other. This ToolPlugin.xml
                    is a consolidated version of both
                    -->
                <copy todir="${rtjar-tmpdir}/META-INF/jaxrpc" overwrite="true">
                    <fileset dir="toolPlugin">
                        <include name="ToolPlugin.xml"/>
                    </fileset>
                </copy>
            </metainf>
            <expandfiles>
                <exclude name="jaxr-api.jar"/>
                <exclude name="saaj-api.jar"/>
            </expandfiles>
        </expand-jars-macro>

        <!-- include wsdl files for wstx resource lookups -->
        <include-wstx-resources/>
        <mkdir dir="${rtjar-tmpdir}/WEB-INF"/>
        <copy todir="${rtjar-tmpdir}/WEB-INF" overwrite="true">
            <fileset dir="${tx.tmp.webinf}"/>
        </copy>
    </target>

    <target name="expand-jars-v3-runtime" unless="runtime.jars.expanded">
        <expand-jars-macro libdir="../${lib.runtime.dir}" tmpdirtowork="${rtjar-tmpdir-v3}">
            <metainf>
                <!-- Replace JAX-WS services files with ours -->
                <copy todir="${rtjar-tmpdir-v3}/META-INF/services" overwrite="true">
                    <fileset dir="../etc/META-INF/services">
                        <!-- The Woodstox settings have to go straight into the woodstox-osgi.jar -->
                        <exclude name="javax.xml.stream.XML*Factory"/>
                    </fileset>
                </copy>
                <!-- Copying the default Metro configuration file into META-INF folder -->
                <copy todir="${rtjar-tmpdir-v3}/META-INF" overwrite="true">
                    <fileset dir="../etc/META-INF">
                        <include name="metro-default.xml"/>
                    </fileset>
                </copy>
                <!--This step is required so that jaxrpc and xwss can run at the
                    same time. When jars are getting merged in webservices-rt.jar
                    the toolPlugin of one overwrites the other. This ToolPlugin.xml
                    is a consolidated version of both
                    -->
                <copy todir="${rtjar-tmpdir-v3}/META-INF/jaxrpc" overwrite="true">
                    <fileset dir="toolPlugin">
                        <include name="ToolPlugin.xml"/>
                    </fileset>
                </copy>
            </metainf>
            <expandfiles>
                <include name="saaj-api.jar"/>
                <include name="jaxr-api.jar"/>
                <exclude name="gmbal*.jar"/>
                <exclude name="management-api*.jar"/>
                <exclude name="jaxb*.jar"/>
                <exclude name="jsr173_api.jar"/>
                <exclude name="woodstox.jar"/>
                <exclude name="mimepull.jar"/>
                <exclude name="FastInfoset.jar"/>
                <exclude name="stax-ex.jar"/>
            </expandfiles>
        </expand-jars-macro>

        <!-- include wsdl files for wstx resource lookups -->
        <include-wstx-resources/>
        <mkdir dir="${rtjar-tmpdir-v3}/WEB-INF"/>
        <copy todir="${rtjar-tmpdir-v3}/WEB-INF" overwrite="true">
            <fileset dir="${tx.tmp.webinf}"/>
        </copy>
    </target>

    <target name="expand-jars-api" unless="runtime.jars.expanded">
        <expand-api-jars-macro libdir="../${lib.runtime.dir}">
            <expandfiles>
                <include name="activation.jar"/>
            </expandfiles>
        </expand-api-jars-macro>
    </target>

    <target name="expand-jars-v3-api" unless="runtime.jars.expanded">
        <expand-api-jars-macro libdir="../${lib.runtime.dir}" tmpdirtowork="${apijar-tmpdir-v3}">
            <expandfiles>
                <exclude name="saaj-api.jar"/>
                <exclude name="jaxrpc-api.jar"/>
                <exclude name="jaxb-api.jar"/>
            </expandfiles>
        </expand-api-jars-macro>
    </target>

    <target name="expand-jars-extra-api" unless="runtime.jars.expanded">
        <expand-extra-api-jars-macro libdir="../${lib.runtime.dir}">
        </expand-extra-api-jars-macro>
    </target>

    <target name="expand-jars-extra" unless="runtime.jars.expanded">
        <expand-extra-jars-macro libdir="../${lib.runtime.dir}">
        </expand-extra-jars-macro>
    </target>

    <target name="combine-jars-runtime">
        <combine-jars-macro jarname="${name}-rt" classesdir="build/classes" jar-tmpdir="${rtjar-tmpdir}">
            <services>
                <fileset dir="${rtjar-tmpdir}">
                    <include name="**/*.*"/>
                    <include name="**/version.properties"/>
                    <exclude name="**/*.TWSDL*"/>
                    <exclude name="**/*.TJava*"/>
                </fileset>
            </services>
        </combine-jars-macro>
    </target>

    <target name="combine-jars-v3-runtime">
        <combine-jars-macro jarname="${name}-rt" classesdir="build/classes" jar-tmpdir="${rtjar-tmpdir-v3}"
                dist-image-dir="${basedir}/${osgi.build.dir}">
            <services>
                <fileset dir="${rtjar-tmpdir-v3}">
                    <include name="**/*.*"/>
                    <include name="**/version.properties"/>
                    <exclude name="**/*.TWSDL*"/>
                    <exclude name="**/*.TJava*"/>
                </fileset>
            </services>
        </combine-jars-macro>
    </target>

    <target name="combine-jars-api">
        <combine-jars-macro jarname="${name}-api" classesdir="${apijar-tmpdir}" jar-tmpdir="${apijar-tmpdir}"/>
    </target>

    <target name="combine-jars-v3-api">
        <combine-jars-macro jarname="${name}-api" classesdir="${apijar-tmpdir-v3}" jar-tmpdir="${apijar-tmpdir-v3}"
                            dist-image-dir="${basedir}/${osgi.build.dir}"/>
    </target>

    <target name="combine-jars-extra">
        <combine-jars-macro jarname="${name}-extra" classesdir="${extrajar-tmpdir}" jar-tmpdir="${extrajar-tmpdir}"/>
    </target>

    <target name="combine-jars-extra-api">
        <combine-jars-macro jarname="${name}-extra-api" classesdir="${extraapijar-tmpdir}" jar-tmpdir="${extraapijar-tmpdir}"/>
    </target>

    <target name="test.resources.copy"
            description="Copy test resources before running tests">
        <copy todir="build/test/unit/data">
            <fileset dir="test/unit/data" includes="*.wsdl"/>
            <fileset dir="test/unit/data" includes="*.xml"/>
        </copy>
    </target>

    <target name="test.services.copy" depends="init"
            description="Copy META-INF/services into class path before running tests">
        <copy todir="${build.classes.dir}">
            <fileset dir="${basedir}/../etc" includes="META-INF/services/**"/>
        </copy>
    </target>

    <target name="src-zip" depends="init">
        <property name="build.src.dir" value="${build.dir}/src"/>
        <delete dir="${build.src.dir}" quiet="true"/>
        <mkdir dir="${build.src.dir}"/>
        <unzip dest="${build.src.dir}">
            <fileset dir="../${lib.runtime.dir}" includes="*src.zip"/>
        </unzip>
        <delete file="${build.src.dir}/*.txt"/>
        <delete dir="${build.src.dir}/META-INF" includeemptydirs="true"/>
        <zip destfile="${build.dir}/${name}-src.zip">
            <fileset dir="src"/>
            <fileset dir="${build.gen-src.dir}"/>
            <fileset dir="${build.src.dir}"/>
        </zip>
    </target>

    <target name="create-wstx-war" depends="init" description="create wstx webservices war file">
        <property name="wstx.tmp" value="${build.dir}/wstx-tmp"/>
        <delete dir="${wstx.tmp}"/>
        <mkdir dir="${wstx.tmp}"/>
        <mkdir dir="${wstx.tmp}/lib"/>
        <copy todir="${wstx.tmp}">
            <fileset dir="${basedir}/etc/tx"/>
        </copy>
        <war destfile="../${dist.image.wsit.lib.dir}/wstx-services.war" webxml="${wstx.tmp}/WEB-INF/web.xml">
            <webinf dir="${wstx.tmp}/WEB-INF" includes="**/*" excludes="web.xml"/>
        </war>
    </target>
    
    <target name="-post-compile-test" depends="init,test.resources.copy,test.services.copy">
    </target>

    <target name="-post-compile-test-single" depends="init,test.resources.copy,test.services.copy">
    </target>

    <target name="create-wstrust-api-jar" depends="init, -pre-pre-compile, -pre-compile" description="create wstrust-api.jar file">
        <property name="wstrust.tmp" value="${build.dir}/wstrust-tmp"/>
        <mkdir dir="${wstrust.tmp}"/>
        <mkdir dir="${wstrust.tmp}/classes"/>
        <mkdir dir="${wstrust.tmp}/lib"/>
        <javac srcdir="${build.gen-src.dir}"
               destdir="${wstrust.tmp}/classes">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
        </javac>
        <javac srcdir="${src.dir}"
               includes="com/sun/xml/ws/api/security/trust/**.java,
                         com/sun/xml/ws/api/security/trust/client/**.java,
                         com/sun/xml/ws/api/security/secconv/client/**.java,
                         com/sun/xml/ws/security/policy/SecureConversationToken.java,
                         com/sun/xml/ws/security/secconv/WSSCVersion.java,
                         com/sun/xml/ws/security/secconv/WSSecureConversationException.java
                         com/sun/xml/ws/security/secconv/impl/client/DefaultSCTokenConfiguration.java,
                         com/sun/xml/ws/security/trust/GenericToken.java,
                         com/sun/xml/ws/security/trust/WSTrustConstants.java
                         com/sun/xml/ws/security/trust/WSTrustVersion.java,
                         com/sun/xml/ws/security/trust/elements/BinarySecret.java,
                         com/sun/xml/ws/runtime/util/Session.java,
                         com/sun/xml/ws/runtime/util/SessionManager.java,
                         com/sun/xml/ws/security/trust/WSTrustElementFactory.java"
               destdir="${wstrust.tmp}/classes">
            <classpath>
                <path path="${javac.classpath}"/>
                <pathelement location="${wstrust.tmp}/classes"/>
                <pathelement location="${basedir}/../lib/tmp/xwss-for-wstrust-api.jar"/>
                <pathelement location="${basedir}/../lib/tmp/trust-secconv-jaxbbindings.jar"/>
                <pathelement location="${basedir}/../lib/tmp/trust-secconv-wssx-jaxbbindings.jar"/>
            </classpath>
        </javac>
        <jar jarfile="${wstrust.tmp}/lib/wstrust-api.jar"
             basedir="${wstrust.tmp}/classes"
             includes="com/sun/xml/ws/api/security/trust/**,
                       com/sun/xml/ws/api/security/secconv/**,
                       com/sun/xml/ws/runtime/util/**,
                       com/sun/xml/ws/security/secconv/impl/client/DefaultSCTokenConfiguration.class,
                       com/sun/xml/ws/security/policy/SecureConversationToken.class,
                       com/sun/xml/ws/security/secconv/WSSCVersion.class,
                       com/sun/xml/ws/security/secconv/WSSecureConversationException.class,
                       com/sun/xml/ws/security/trust/GenericToken.class,
                       com/sun/xml/ws/security/trust/WSTrustConstants.class,
                       com/sun/xml/ws/security/trust/WSTrustElementFactory.class,
                       com/sun/xml/ws/security/trust/WSTrustVersion.class,
                       com/sun/xml/ws/security/trust/elements/BinarySecret.class"/>
    </target>
    
</project>
