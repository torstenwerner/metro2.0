/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 1997-2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License. You can obtain
 * a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 * or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.  If applicable, add the following below the License
 * Header, with the fields enclosed by brackets [] replaced by your own
 * identifying information: "Portions Copyrighted [year]
 * [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

package com.sun.xml.ws.rx.rm.faults;

import com.sun.xml.ws.api.message.Packet;
import com.sun.xml.ws.rx.rm.RmVersion;
import com.sun.xml.ws.rx.rm.runtime.RuntimeContext;
import javax.xml.namespace.QName;

/**
 * Properties:
 * [Code] Sender or Receiver
 * [Subcode] wsrm:CreateSequenceRefused
 * [Reason] The Create Sequence request has been refused by the RM Destination.
 * [Detail] xs:any
 *
 * Generated by: RM Source or RM Destination.
 * Condition : In response to a CreateSequence message when the RM Destination does not wish to create a new Sequence.
 * Action Upon Generation : Unspecified.
 * Action Upon Receipt : Sequence terminated.
 *
 * @author Marek Potociar (marek.potociar at sun.com)
 */
public class CreateSequenceRefusedFault extends AbstractSoapFaultException {
    private static final long serialVersionUID = 1533003947712389030L;
    private static final String REASON = "The Create Sequence request has been refused by the RM Destination.";
    //
    private final Code code;

    public CreateSequenceRefusedFault(String exceptionMessage, Code code) {
        super(exceptionMessage, REASON, true);
        this.code = code;
    }

    public CreateSequenceRefusedFault(String exceptionMessage, Code code, Throwable cause) {
        super(exceptionMessage, REASON, true, cause);
        
        this.code = code;
    }

    @Override
    public Code getCode() {
        return code;
    }

    @Override
    public QName getSubcode(RmVersion rv) {
        return rv.createSequenceRefusedFaultCode;
    }

    @Override
    public String getDetailValue() {
        return getMessage();
    }

    @Override
    public Packet toRequest(RuntimeContext rc) {
        return rc.communicator.createRequestPacket(
                createSoapFaultMessage(rc, false),
                getProperFaultActionForAddressingVersion(rc.rmVersion, rc.addressingVersion),
                false);
    }

    @Override
    public Packet toResponse(RuntimeContext rc, Packet request) {
        return rc.communicator.createResponsePacket(
                request,
                createSoapFaultMessage(rc, false),
                getProperFaultActionForAddressingVersion(rc.rmVersion, rc.addressingVersion));
    }
}
